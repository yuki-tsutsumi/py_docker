version: "3.0"

services:
  api:
    container_name: "api"
    volumes:
      - ./app:/app
    build: .
    ports:
      - 8080:8080
    depends_on:
      - kvs
      - mongodb
    env_file:
      - env/app.env
    #gunicornによるreloadがが効かないので一旦uvicornに戻す
    # command: "gunicorn --worker-class uvicorn.workers.UvicornWorker  --reload --config gunicorn_conf.py app.main:app"
    command: uvicorn app.main:app --reload  --host 0.0.0.0 --port 8080

  worker:
    container_name: "worker"
    volumes:
      - ./app/app/tasks.py:/app/app/tasks.py
    build: .
    env_file:
      - env/app.env
    depends_on:
      - api
    command: celery -A app.tasks worker --loglevel=info --concurrency=5

  kvs:
    image: redis:7.0.5-alpine
    environment:
      TZ: 'Asia/Tokyo'
    ports:
      - "6379:6379"
    volumes:
      - redis_store:/data"
    tty: true

  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: password
    command: server --console-address ":9001" /data
    volumes:
    - ./minio_data:/export  # MinIOストレージの永続化
    ports:
      - 9000:9000
      - 9001:9001
  
  rabbitmq:
    image: 'rabbitmq:3.6-management-alpine'
    container_name: "rabbitmq"
    ports:
      - 5672:5672
      - 15672:15672

  consumer:
    container_name: consumer
    build: ./consumer

  mongodb:
    container_name: mongo_db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    build:
      context: .
      dockerfile: ./mongo_db/Dockerfile
    ports:
      - 27017:27017
    tty: true
    volumes:
      - ./mongo_db/db:/data/db
      - ./mongo_db/configdb:/data/configdb
      - ./mongo_db/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js

volumes:
  redis_store: